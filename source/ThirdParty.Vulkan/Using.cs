global using HINSTANCE                                 = nint;
global using HWND                                      = nint;
global using PFN_vkAllocationFunction                  = nint;
global using PFN_vkDebugUtilsMessengerCallbackEXT      = nint;
global using PFN_vkFreeFunction                        = nint;
global using PFN_vkInternalAllocationNotification      = nint;
global using PFN_vkInternalFreeNotification            = nint;
global using PFN_vkReallocationFunction                = nint;
global using size_t                                    = ulong;
global using VkAccessFlags                             = ThirdParty.Vulkan.Flags.AccessFlags;
global using VkAttachmentDescriptionFlags              = ThirdParty.Vulkan.Flags.AttachmentDescriptionFlags;
global using VkAttachmentLoadOp                        = ThirdParty.Vulkan.Enums.AttachmentLoadOp;
global using VkAttachmentStoreOp                       = ThirdParty.Vulkan.Enums.AttachmentStoreOp;
global using VkBlendFactor                             = ThirdParty.Vulkan.Enums.BlendFactor;
global using VkBlendOp                                 = ThirdParty.Vulkan.Enums.BlendOp;
global using VkBorderColor                             = ThirdParty.Vulkan.Enums.BorderColor;
global using VkBuffer                                  = nint;
global using VkBufferCreateFlags                       = ThirdParty.Vulkan.Flags.BufferCreateFlags;
global using VkBufferUsageFlags                        = ThirdParty.Vulkan.Flags.BufferUsageFlags;
global using VkBufferView                              = nint;
global using VkColorComponentFlags                     = ThirdParty.Vulkan.Flags.ColorComponentFlags;
global using VkColorSpaceKHR                           = ThirdParty.Vulkan.Enums.KHR.ColorSpace;
global using VkCommandBuffer                           = nint;
global using VkCommandBufferLevel                      = ThirdParty.Vulkan.Flags.CommandBufferLevelFlags;
global using VkCommandBufferResetFlags                 = ThirdParty.Vulkan.Flags.CommandBufferResetFlags;
global using VkCommandBufferUsageFlags                 = ThirdParty.Vulkan.Flags.CommandBufferUsageFlags;
global using VkCommandPool                             = nint;
global using VkCommandPoolCreateFlags                  = ThirdParty.Vulkan.Flags.CommandPoolCreateFlags;
global using VkCompareOp                               = ThirdParty.Vulkan.Enums.CompareOp;
global using VkComponentSwizzle                        = ThirdParty.Vulkan.Enums.ComponentSwizzle;
global using VkCompositeAlphaFlagBitsKHR               = ThirdParty.Vulkan.Flags.KHR.CompositeAlphaFlags;
global using VkCullModeFlags                           = ThirdParty.Vulkan.Flags.CullModeFlags;
global using VkDebugUtilsMessageSeverityFlagBitsEXT    = ThirdParty.Vulkan.Flags.EXT.DebugUtilsMessageSeverityFlags;
global using VkDebugUtilsMessageSeverityFlagsEXT       = ThirdParty.Vulkan.Flags.EXT.DebugUtilsMessageSeverityFlags;
global using VkDebugUtilsMessageTypeFlagsEXT           = ThirdParty.Vulkan.Flags.EXT.DebugUtilsMessageTypeFlags;
global using VkDebugUtilsMessengerCallbackDataFlagsEXT = uint;
global using VkDebugUtilsMessengerCreateFlagsEXT       = uint;
global using VkDebugUtilsMessengerEXT                  = nint;
global using VkDependencyFlags                         = ThirdParty.Vulkan.Flags.DependencyFlags;
global using VkDescriptorPool                          = nint;
global using VkDescriptorPoolCreateFlags               = ThirdParty.Vulkan.Flags.DescriptorPoolCreateFlags;
global using VkDescriptorSet                           = nint;
global using VkDescriptorSetLayout                     = nint;
global using VkDescriptorSetLayoutCreateFlags          = ThirdParty.Vulkan.Flags.DescriptorSetLayoutCreateFlags;
global using VkDescriptorType                          = ThirdParty.Vulkan.Enums.DescriptorType;
global using VkDevice                                  = nint;
global using VkDeviceCreateFlags                       = uint;
global using VkDeviceMemory                            = nint;
global using VkDeviceQueueCreateFlags                  = ThirdParty.Vulkan.Flags.DeviceQueueCreateFlags;
global using VkDeviceSize                              = ulong;
global using VkDynamicState                            = ThirdParty.Vulkan.Enums.DynamicState;
global using VkFence                                   = nint;
global using VkFenceCreateFlags                        = ThirdParty.Vulkan.Flags.FenceCreateFlags;
global using VkFilter                                  = ThirdParty.Vulkan.Enums.Filter;
global using VkFormat                                  = ThirdParty.Vulkan.Enums.Format;
global using VkFormatFeatureFlags                      = ThirdParty.Vulkan.Flags.FormatFeatureFlags;
global using VkFramebuffer                             = nint;
global using VkFramebufferCreateFlags                  = ThirdParty.Vulkan.Flags.FramebufferCreateFlags;
global using VkFrontFace                               = ThirdParty.Vulkan.Enums.FrontFace;
global using VkImage                                   = nint;
global using VkImageAspectFlags                        = ThirdParty.Vulkan.Flags.ImageAspectFlags;
global using VkImageCreateFlags                        = ThirdParty.Vulkan.Flags.ImageCreateFlags;
global using VkImageLayout                             = ThirdParty.Vulkan.Enums.ImageLayout;
global using VkImageTiling                             = ThirdParty.Vulkan.Enums.ImageTiling;
global using VkImageType                               = ThirdParty.Vulkan.Enums.ImageType;
global using VkImageUsageFlags                         = ThirdParty.Vulkan.Flags.ImageUsageFlags;
global using VkImageView                               = nint;
global using VkImageViewCreateFlags                    = ThirdParty.Vulkan.Flags.ImageViewCreateFlags;
global using VkImageViewType                           = ThirdParty.Vulkan.Enums.ImageViewType;
global using VkIndexType                               = ThirdParty.Vulkan.Enums.IndexType;
global using VkInstance                                = nint;
global using VkInstanceCreateFlags                     = ThirdParty.Vulkan.Flags.InstanceCreateFlags;
global using VkInternalAllocationType                  = ThirdParty.Vulkan.Enums.InternalAllocationType;
global using VkLogicOp                                 = ThirdParty.Vulkan.Enums.LogicOp;
global using VkMemoryHeapFlags                         = ThirdParty.Vulkan.Flags.MemoryHeapFlags;
global using VkMemoryMapFlags                          = uint;
global using VkMemoryPropertyFlags                     = ThirdParty.Vulkan.Flags.MemoryPropertyFlags;
global using VkPhysicalDevice                          = nint;
global using VkPhysicalDeviceType                      = ThirdParty.Vulkan.Enums.PhysicalDeviceType;
global using VkPipeline                                = nint;
global using VkPipelineBindPoint                       = ThirdParty.Vulkan.Enums.PipelineBindPoint;
global using VkPipelineCache                           = nint;
global using VkPipelineColorBlendStateCreateFlags      = ThirdParty.Vulkan.Flags.PipelineColorBlendStateCreateFlags;
global using VkPipelineCreateFlags                     = ThirdParty.Vulkan.Flags.PipelineCreateFlags;
global using VkPipelineDepthStencilStateCreateFlags    = ThirdParty.Vulkan.Flags.PipelineDepthStencilStateCreateFlags;
global using VkPipelineDynamicStateCreateFlags         = uint;
global using VkPipelineInputAssemblyStateCreateFlags   = uint;
global using VkPipelineLayout                          = nint;
global using VkPipelineLayoutCreateFlags               = ThirdParty.Vulkan.Flags.PipelineLayoutCreateFlags;
global using VkPipelineMultisampleStateCreateFlags     = uint;
global using VkPipelineRasterizationStateCreateFlags   = uint;
global using VkPipelineShaderStageCreateFlags          = ThirdParty.Vulkan.Flags.PipelineShaderStageCreateFlags;
global using VkPipelineStageFlags                      = ThirdParty.Vulkan.Flags.PipelineStageFlags;
global using VkPipelineTessellationStateCreateFlags    = uint;
global using VkPipelineVertexInputStateCreateFlags     = uint;
global using VkPipelineViewportStateCreateFlags        = uint;
global using VkPolygonMode                             = ThirdParty.Vulkan.Enums.PolygonMode;
global using VkPresentModeKHR                          = ThirdParty.Vulkan.Enums.KHR.PresentMode;
global using VkPrimitiveTopology                       = ThirdParty.Vulkan.Enums.PrimitiveTopology;
global using VkQueryControlFlags                       = ThirdParty.Vulkan.Flags.QueryControlFlags;
global using VkQueryPipelineStatisticFlags             = ThirdParty.Vulkan.Flags.QueryPipelineStatisticFlags;
global using VkQueue                                   = nint;
global using VkQueueFlags                              = ThirdParty.Vulkan.Flags.QueueFlags;
global using VkRenderPass                              = nint;
global using VkRenderPassCreateFlags                   = ThirdParty.Vulkan.Flags.RenderPassCreateFlags;
global using VkResult                                  = ThirdParty.Vulkan.Enums.Result;
global using VkSampleCountFlagBits                     = ThirdParty.Vulkan.Flags.SampleCountFlags;
global using VkSampleCountFlags                        = ThirdParty.Vulkan.Flags.SampleCountFlags;
global using VkSampleMask                              = nint;
global using VkSampler                                 = nint;
global using VkSamplerAddressMode                      = ThirdParty.Vulkan.Enums.SamplerAddressMode;
global using VkSamplerCreateFlags                      = uint;
global using VkSamplerMipmapMode                       = ThirdParty.Vulkan.Enums.SamplerMipmapMode;
global using VkSemaphore                               = nint;
global using VkSemaphoreCreateFlags                    = uint;
global using VkShaderModule                            = nint;
global using VkShaderModuleCreateFlags                 = uint;
global using VkShaderStageFlagBits                     = ThirdParty.Vulkan.Flags.ShaderStageFlags;
global using VkShaderStageFlags                        = ThirdParty.Vulkan.Flags.ShaderStageFlags;
global using VkSharingMode                             = ThirdParty.Vulkan.Enums.SharingMode;
global using VkStencilOp                               = ThirdParty.Vulkan.Enums.StencilOp;
global using VkSubpassContents                         = ThirdParty.Vulkan.Enums.SubpassContents;
global using VkSubpassDescriptionFlags                 = ThirdParty.Vulkan.Flags.SubpassDescriptionFlags;
global using VkSurfaceKHR                              = nint;
global using VkSurfaceTransformFlagBitsKHR             = ThirdParty.Vulkan.Flags.KHR.SurfaceTransformFlags;
global using VkSurfaceTransformFlagsKHR                = ThirdParty.Vulkan.Flags.KHR.SurfaceTransformFlags;
global using VkSwapchainCreateFlagsKHR                 = ThirdParty.Vulkan.Flags.KHR.SwapchainCreateFlags;
global using VkSwapchainKHR                            = nint;
global using VkSystemAllocationScope                   = ThirdParty.Vulkan.Enums.SystemAllocationScope;
global using VkVertexInputRate                         = ThirdParty.Vulkan.Enums.VertexInputRate;
global using VkWin32SurfaceCreateFlagsKHR              = uint;
