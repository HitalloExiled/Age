{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "analyze",
            "command": "dotnet",
            "type": "process",
            "args": [
                "roslynator",
                "analyze"
            ],
            "problemMatcher": "$msCompile"
        },
        {
            "label": "analyze:fix",
            "command": "dotnet",
            "type": "process",
            "args": [
                "roslynator",
                "fix"
            ],
            "problemMatcher": "$msCompile"
        },
        {
            "label": "benchmark",
            "command": "dotnet",
            "type": "process",
            "args": [
                "run",
                "-c=Release",
                "--project=./benchmarks/Age.Benchmarks/Age.Benchmarks.csproj",
            ],
            "problemMatcher": "$msCompile"
        },
        {
            "label": "build",
            "command": "dotnet",
            "type": "process",
            "args": [
                "build",
                "${workspaceFolder}/Age.sln",
                "/property:GenerateFullPaths=true",
                "/consoleloggerparameters:NoSummary"
            ],
            "problemMatcher": "$msCompile"
        },
        {
            "label": "clean",
            "command": "dotnet",
            "type": "process",
            "args": [
                "clean",
                "${workspaceFolder}/Age.sln"
            ],
            "problemMatcher": "$msCompile"
        },
        {
            "label": "rebuild",
            "dependsOrder": "sequence",
            "dependsOn": [
                "clean",
                "build"
            ],
            "problemMatcher": []
        },
        {
            "label": "publish",
            "command": "dotnet",
            "type": "process",
            "args": [
                "publish",
                "${workspaceFolder}/Age.sln",
                "/property:GenerateFullPaths=true",
                "/consoleloggerparameters:NoSummary"
            ],
            "problemMatcher": "$msCompile"
        },
        {
            "label": "clean-test",
            "windows": {
                "command": "if (Test-Path -Path ./tests/Age.Tests/TestResults) { Remove-Item ./tests/Age.Tests/TestResults/* -Force -Recurse; }"
            },
            "type": "shell",
            "problemMatcher": []
        },
        {
            "label": "test",
            "command": "dotnet",
            "type": "process",
            "dependsOn": [
                "clean-test"
            ],
            "args": [
                "test",
                "--collect:\"XPlat Code Coverage\"",
                "--settings=coverlet.runsettings"
            ],
            "problemMatcher": "$msCompile"
        },
        {
            "label": "generate-report",
            "command": "reportgenerator",
            "type": "process",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "dependsOn": [
                "test"
            ],
            "args": [
                "reportgenerator",
                "-reports:\"tests/*/TestResults/*/coverage.opencover.xml\"",
                "-targetdir:\".coverage\"",
                "-reporttypes:Html"
            ],
            "problemMatcher": "$msCompile"
        },
        {
            "label": "coverage",
            "windows": {
                "command": "Invoke-Item ./.coverage/index.html"
            },
            "type": "shell",
            "dependsOn": [
                "generate-report"
            ],
            "problemMatcher": []
        },
        {
            "label": "watch",
            "command": "dotnet",
            "type": "process",
            "args": [
                "watch",
                "run",
                "--project",
                "${workspaceFolder}/source/Age.Editor"
            ],
            "problemMatcher": "$msCompile"
        },
        {
            "label": "shader:compile",
            "windows": {
                "command": "glslc ${file} -o ${file}.spv -S;"
            },
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "type": "shell",
            "problemMatcher": []
        },
        {
            "label": "build:all",
            "dependsOn": [
                "build",
                "shader:compile"
            ],
            "dependsOrder": "parallel",
            "problemMatcher": "$msCompile"
        }
    ]
}
